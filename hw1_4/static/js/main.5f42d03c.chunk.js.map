{"version":3,"sources":["Components/TransactionHistory/TransactionHistory.module.css","Components/TransactionItem/TransactionItem.module.css","Components/TransactionItem/TransactionItem.js","Components/TransactionHistory/TransactionHistory.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","TransactionItem","item","values","Object","keys","filter","key","map","className","s","general","TransactionHistory","transactions","head","deals","deal","idx","white","greey","transaction_history","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,oBAAsB,gDAAgD,KAAO,iCAAiC,MAAQ,kCAAkC,MAAQ,oC,kBCAlLD,EAAOC,QAAU,CAAC,QAAU,mC,qmECSbC,MANf,YAAoC,IAATC,EAAQ,EAARA,KACnBC,EAASC,OAAOC,KAAKH,GACxBI,QAAO,SAACC,GAAD,MAAiB,OAARA,KAChBC,KAAI,SAACD,GAAD,OAAS,wBAAIE,UAAWC,IAAEC,SAAUT,EAAKK,OAChD,OAAO,oCAAGJ,I,gBCkBGS,MArBf,YAA+C,IAAjBC,EAAgB,EAAhBA,aACtBR,EAAOD,OAAOC,KAAKQ,EAAa,IACnCP,QAAO,SAACC,GAAD,MAAiB,OAARA,KAChBC,KAAI,SAACN,GAAD,OAAU,wBAAIO,UAAWC,IAAEI,MAAOZ,MAEnCa,EAAQF,EAAaL,KAAI,SAACQ,EAAMC,GAAP,OAC7B,wBAAIR,UAAWQ,EAAM,IAAM,EAAIP,IAAEQ,MAAQR,IAAES,OACzC,kBAAC,EAAD,CAAiBjB,KAAMc,QAI3B,OACE,2BAAOP,UAAWC,IAAEU,qBAClB,+BACE,4BAAKf,IAEP,+BAAQU,K,OCdCM,MAJf,WACE,OAAO,kBAAC,EAAD,CAAoBR,aAAcA,KCQvBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f42d03c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transaction_history\":\"TransactionHistory_transaction_history__2tm-5\",\"head\":\"TransactionHistory_head__1aDL8\",\"white\":\"TransactionHistory_white__WB1Ml\",\"greey\":\"TransactionHistory_greey__3tn6j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"general\":\"TransactionItem_general__1g98h\"};","import React from \"react\";\r\n\r\nimport s from \"./TransactionItem.module.css\";\r\n\r\nfunction TransactionItem({ item }) {\r\n  const values = Object.keys(item)\r\n    .filter((key) => key !== \"id\")\r\n    .map((key) => <td className={s.general}>{item[key]}</td>);\r\n  return <>{values}</>;\r\n}\r\nexport default TransactionItem;\r\n","import React from \"react\";\r\nimport TransactionItem from \"../TransactionItem/TransactionItem\";\r\n\r\nimport s from \"./TransactionHistory.module.css\";\r\n\r\nfunction TransactionHistory({ transactions }) {\r\n  const keys = Object.keys(transactions[0])\r\n    .filter((key) => key !== \"id\")\r\n    .map((item) => <th className={s.head}>{item}</th>);\r\n\r\n  const deals = transactions.map((deal, idx) => (\r\n    <tr className={idx % 2 === 0 ? s.white : s.greey}>\r\n      <TransactionItem item={deal} />\r\n    </tr>\r\n  ));\r\n\r\n  return (\r\n    <table className={s.transaction_history}>\r\n      <thead>\r\n        <tr>{keys}</tr>\r\n      </thead>\r\n      <tbody>{deals}</tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default TransactionHistory;\r\n","import React from \"react\";\nimport TransactionHistory from \"../TransactionHistory/TransactionHistory\";\nimport transactions from \"../../Data/transactions.json\";\nfunction App() {\n  return <TransactionHistory transactions={transactions} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./Components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}