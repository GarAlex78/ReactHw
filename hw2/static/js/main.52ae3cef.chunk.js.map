{"version":3,"sources":["Components/Item/Item.module.css","Components/Title/Title.module.css","Components/App/App.module.css","Components/Title/Title.js","Components/Item/Item.js","Components/App/App.js","index.js"],"names":["module","exports","Title","text","className","s","title","title_text","Item","statistic","labels","Set","map","el","label","res","percentage","filter","reduce","prev","curr","push","stats","style","backgroundColor","Math","floor","random","stats_list","key","quantity","App","card","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,WAAa,yBAAyB,MAAQ,oBAAoB,SAAW,yB,iBCA3HD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,4B,oaCA5DD,EAAOC,QAAU,CAAC,KAAO,oB,8HCeVC,EAZD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OACE,yBAAKC,UAAWC,IAAEC,OAChB,uBAAGF,UAAWC,IAAEE,YAAaJ,K,+BC6BpBK,EA1BF,SAAC,GAAmB,IAAD,EAAhBC,EAAgB,EAAhBA,UACRC,EAAM,YAAO,IAAIC,IAAIF,EAAUG,KAAI,SAACC,GAAD,OAAQA,EAAGC,WAC9CC,EAAM,GAFkB,cAGZL,GAHY,yBAGrBI,EAHqB,QAItBE,EAAaP,EAChBQ,QAAO,SAACJ,GAAD,OAAQA,EAAGC,QAAUA,KAC5BI,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKJ,aAAY,GAClDD,EAAIM,KAAK,CAAEP,QAAOE,gBAJpB,2BAA2B,IAHG,8BAU9B,OACE,wBAAIZ,UAAWC,IAAEiB,OACdP,EAAIH,KAAI,gBAAGE,EAAH,EAAGA,MAAOE,EAAV,EAAUA,WAAV,OACP,wBACEO,MAAO,CAAEC,gBAnBX,OAAN,OAAcC,KAAKC,MAAsB,IAAhBD,KAAKE,UAA9B,aAAkDF,KAAKC,MACrC,IAAhBD,KAAKE,UADP,aAEMF,KAAKC,MAAsB,IAAhBD,KAAKE,UAFtB,MAoBQvB,UAAWC,IAAEuB,WACbC,IAAKf,GAEL,0BAAMV,UAAWC,IAAES,OAAQA,GAC3B,0BAAMV,UAAWC,IAAEyB,UAAWd,EAA9B,W,uBCdKe,EATH,WACV,OACE,yBAAK3B,UAAWC,IAAE2B,MAChB,kBAAC,EAAD,CAAO7B,KAAK,iBACZ,kBAAC,EAAD,CAAMM,UAAWwB,MCLvBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.52ae3cef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"Item_stats__2M-Dn\",\"stats_list\":\"Item_stats_list__1qxuQ\",\"label\":\"Item_label__p6hxw\",\"quantity\":\"Item_quantity__1ziGx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__3QJVB\",\"title_text\":\"Title_title_text__1lT3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"App_card__13Iwy\"};","import React from \"react\";\r\n\r\nimport T from \"prop-types\";\r\nimport s from \"./Title.module.css\";\r\nconst Title = ({ text }) => {\r\n  return (\r\n    <div className={s.title}>\r\n      <p className={s.title_text}>{text}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nTitle.propTypes = {\r\n  text: T.string,\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport s from \"./Item.module.css\";\r\n\r\n//---------------------------------------------\r\nconst randomColor = () => {\r\n  return `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(\r\n    Math.random() * 256\r\n  )}, ${Math.floor(Math.random() * 256)})`;\r\n};\r\n//-------------------------------------------\r\nconst Item = ({ statistic }) => {\r\n  const labels = [...new Set(statistic.map((el) => el.label))];\r\n  const res = [];\r\n  for (let label of labels) {\r\n    const percentage = statistic\r\n      .filter((el) => el.label === label)\r\n      .reduce((prev, curr) => prev + curr.percentage, 0);\r\n    res.push({ label, percentage });\r\n  }\r\n\r\n  return (\r\n    <ul className={s.stats}>\r\n      {res.map(({ label, percentage }) => (\r\n        <li\r\n          style={{ backgroundColor: randomColor() }}\r\n          className={s.stats_list}\r\n          key={label}\r\n        >\r\n          <span className={s.label}>{label}</span>\r\n          <span className={s.quantity}>{percentage}%</span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React from \"react\";\nimport Title from \"../Title/Title\";\nimport Item from \"../Item/Item\";\nimport data from \"../../Data/statistical-data.json\";\nimport s from \"./App.module.css\";\n\nconst App = () => {\n  return (\n    <div className={s.card}>\n      <Title text=\"Upload Stats\" />\n      <Item statistic={data} />\n    </div>\n  );\n};\n\nexport default App;\n\n// ------------------------------------------------------\n\n//===============================\n\n// //debugger;\n\n// const r = statistic.reduce((previousValue, currentItem, index, array) => {\n//   //================================================================\n//   let sum = 0;\n//   console.log(\"label\", currentItem.label);\n//   if (previousValue.length === 0) {\n//     previousValue.push(currentItem);\n//     console.log(\"previousValueR\", previousValue);\n//     return previousValue;\n//   }\n//   previousValue.filter((prev, index, array) => {\n//     if (prev.label === currentItem.label) {\n//       prev.percentage = prev.percentage + currentItem.percentage;\n//       sum = prev.percentage;\n\n//       previousValue.splice(index, 1, prev);\n//       console.log(\"prev1\", prev);\n//     } else if (array.length - 1 === index && sum === 0) {\n//       previousValue.push(currentItem);\n//       console.log(\"prev2\", prev);\n//       console.log(\"previousValue\", previousValue);\n//     }\n//   });\n//   return previousValue;\n// }, []);\n// console.log(\"r: \", r);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./Components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}